{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","movies","setMovies","isLoaded","setIsLoaded","useEffect","a","fetch","fetchUrl","json","response","Promise","all","results","map","id","title","overview","release_date","poster_path","backdrop_path","getTrailer","trailer","poster","backdrop","movieArray","fetchMovieData","trailerUrl","fetchTrailer","keyArray","filteredArray","filter","video","type","youtubeKey","key","style","display","alignItems","justifyContent","flexDirection","height","padding","width","src","alt","position","fontWeight","fontSize","marginTop","backgroundColor","borderRadius","href","replace","toLowerCase","substring","target","rel","textDecoration","color","top","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.980bc971.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Loader from 'react-loader-spinner'\nconst App = () => {\n\tconst [movies, setMovies] = useState([]);\n\tconst [isLoaded, setIsLoaded] = useState(false);\n\tuseEffect(() => {\n\t\tconst fetchMovieData = async () => {\n\t\t\tsetIsLoaded(false);\n\t\t\tconst url =\n\t\t\t\t'https://api.themoviedb.org/3/trending/movie/week?api_key=baca7fa48dbd930e3a2e880d3a6c4f8a';\n\t\t\tconst fetchUrl = await fetch(url);\n\t\t\tconst response = await fetchUrl.json();\n\t\t\tconst movieArray = await Promise.all(\n\t\t\t\tresponse.results.map(\n\t\t\t\t\tasync ({\n\t\t\t\t\t\tid,\n\t\t\t\t\t\ttitle,\n\t\t\t\t\t\toverview,\n\t\t\t\t\t\trelease_date,\n\t\t\t\t\t\tposter_path,\n\t\t\t\t\t\tbackdrop_path,\n\t\t\t\t\t}) => {\n\t\t\t\t\t\tconst trailer = await getTrailer(id);\n\t\t\t\t\t\tconst poster = `https://image.tmdb.org/t/p/original/${poster_path}`;\n\t\t\t\t\t\tconst backdrop = `https://image.tmdb.org/t/p/original/${backdrop_path}`;\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\ttitle,\n\t\t\t\t\t\t\toverview,\n\t\t\t\t\t\t\trelease_date,\n\t\t\t\t\t\t\tposter,\n\t\t\t\t\t\t\tbackdrop,\n\t\t\t\t\t\t\ttrailer,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t);\n\t\t\tsetMovies(movieArray);\n\t\t\tsetIsLoaded(true);\n\t\t};\n\t\tfetchMovieData();\n\t}, []);\n\n\tconst getTrailer = async id => {\n\t\tconst trailerUrl = `https://api.themoviedb.org/3/movie/${id}/videos?api_key=baca7fa48dbd930e3a2e880d3a6c4f8a&language=en-US`;\n\t\tconst fetchTrailer = await fetch(trailerUrl);\n\t\tconst response = await fetchTrailer.json();\n\t\tconst keyArray = response.results;\n\t\tconst filteredArray = keyArray.filter(video => video?.type === 'Trailer');\n\t\tconst youtubeKey = filteredArray[0]?.key;\n\t\treturn youtubeKey ? `https://www.youtube.com/embed/${youtubeKey}` : '';\n\t};\n\n\treturn (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\tdisplay: 'flex',\n\t\t\t\talignItems: 'center',\n\t\t\t\tjustifyContent: 'center',\n\t\t\t\tflexDirection: 'column',\n\t\t\t}}\n\t\t>\n\t\t\t{isLoaded\n\t\t\t\t? movies.map(\n\t\t\t\t\t\t({\n\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\ttitle,\n\t\t\t\t\t\t\toverview,\n\t\t\t\t\t\t\tposter,\n\t\t\t\t\t\t\trelease_date,\n\t\t\t\t\t\t\ttrailer,\n\t\t\t\t\t\t\tbackdrop,\n\t\t\t\t\t\t}) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div key={id} style={{ display: 'flex', height: '50%' }}>\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\tstyle={{ padding: '20px', height: '100%', width: '30%' }}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc={poster}\n\t\t\t\t\t\t\t\t\t\t\talt='poster'\n\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\tposition: 'relative',\n\t\t\t\t\t\t\t\t\t\t\t\theight: '100%',\n\t\t\t\t\t\t\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\tpadding: '0 25px 25px 25px',\n\t\t\t\t\t\t\t\t\t\t\twidth: '70%',\n\t\t\t\t\t\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\t\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\t\t\t\t\t\t\tjustifyContent: 'space-between',\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<div style={{ height: 'auto' }}>\n\t\t\t\t\t\t\t\t\t\t\t<p\n\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\t\tfontWeight: 'bold',\n\t\t\t\t\t\t\t\t\t\t\t\t\tfontSize: '2em',\n\t\t\t\t\t\t\t\t\t\t\t\t\tmarginTop: '10px',\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t{title}\n\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\t\theight: '100px',\n\t\t\t\t\t\t\t\t\t\t\t\t\twidth: '200px',\n\t\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: 'green',\n\t\t\t\t\t\t\t\t\t\t\t\t\tborderRadius: '10px',\n\t\t\t\t\t\t\t\t\t\t\t\t\tpadding: '10px',\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\t\t\t\thref={`https://yts.mx/movies/${title\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.replace(/\\s+/g, '-')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.replace(/[^-\\w]/g, '')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.toLowerCase()}-${release_date.substring(0, 4)}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\ttarget='_blank'\n\t\t\t\t\t\t\t\t\t\t\t\t\trel='noopener noreferrer'\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ textDecoration: 'none', color: 'white' }}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\tDownload\n\t\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t<p>{release_date}</p>\n\t\t\t\t\t\t\t\t\t\t\t<p>{overview}</p>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div style={{ height: '70%' }}>\n\t\t\t\t\t\t\t\t\t\t\t{trailer ? (\n\t\t\t\t\t\t\t\t\t\t\t\t<iframe\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle='trailer'\n\t\t\t\t\t\t\t\t\t\t\t\t\twidth='100%'\n\t\t\t\t\t\t\t\t\t\t\t\t\theight='100%'\n\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={trailer}\n\t\t\t\t\t\t\t\t\t\t\t\t></iframe>\n\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t<h1>No trailer for this movie yet</h1>\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t  )\n\t\t\t\t:<Loader type=\"Bars\" color=\"#E30914\" height={80} width={80} style={{position: 'absolute', top: '45%'}} /> }\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}